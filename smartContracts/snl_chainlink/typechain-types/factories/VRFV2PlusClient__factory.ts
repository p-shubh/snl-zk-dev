/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  VRFV2PlusClient,
  VRFV2PlusClientInterface,
} from "../VRFV2PlusClient";

const _abi = [
  {
    inputs: [],
    name: "EXTRA_ARGS_V1_TAG",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60b1610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063f7514ab4146038575b600080fd5b605e7f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa81565b6040516001600160e01b0319909116815260200160405180910390f3fea2646970667358221220f6f68ca72b97797234c786ab988386ce60088bf2b4df6c4d4e3a1cd37ce35df264736f6c63430008140033";

type VRFV2PlusClientConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VRFV2PlusClientConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VRFV2PlusClient__factory extends ContractFactory {
  constructor(...args: VRFV2PlusClientConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "VRFV2PlusClient";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VRFV2PlusClient> {
    return super.deploy(overrides || {}) as Promise<VRFV2PlusClient>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VRFV2PlusClient {
    return super.attach(address) as VRFV2PlusClient;
  }
  connect(signer: Signer): VRFV2PlusClient__factory {
    return super.connect(signer) as VRFV2PlusClient__factory;
  }
  static readonly contractName: "VRFV2PlusClient";
  public readonly contractName: "VRFV2PlusClient";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VRFV2PlusClientInterface {
    return new utils.Interface(_abi) as VRFV2PlusClientInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VRFV2PlusClient {
    return new Contract(address, _abi, signerOrProvider) as VRFV2PlusClient;
  }
}
